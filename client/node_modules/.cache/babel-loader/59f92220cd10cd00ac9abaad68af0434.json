{"ast":null,"code":"import _regeneratorRuntime from \"/Users/billyendres/Documents/react/streams/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/billyendres/Documents/react/streams/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/billyendres/Documents/react/streams/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport streams from \"../apis/streams\";\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM } from \"./types\"; //Takes userId as argument and payload\n//referenced from onAuthChange function in GoogleOath\n\nexport var signIn = function signIn(userId) {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport var signOut = function signOut() {\n  return {\n    type: SIGN_OUT\n  };\n}; //Creating new async POST req\n\nexport var createStream = function createStream(formValues) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var userId, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                userId = getState().auth.userId;\n                _context.next = 3;\n                return streams.post(\"/streams\", _objectSpread({}, formValues, {\n                  userId: userId\n                }));\n\n              case 3:\n                response = _context.sent;\n                dispatch({\n                  type: CREATE_STREAM,\n                  payload: response.data\n                }); //Using programmatic navigation to get user back to root route\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}; //Creating new async GET req\n\nexport var fetchStreams = function fetchStreams() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return streams.get(\"/streams\");\n\n              case 2:\n                response = _context2.sent;\n                dispatch({\n                  type: FETCH_STREAMS,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}; //Creating new async GET req\n\nexport var fetchStream = function fetchStream(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return streams.get(\"/streams/\".concat(id));\n\n              case 2:\n                response = _context3.sent;\n                dispatch({\n                  type: FETCH_STREAM,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}; //Creating new async PUT req\n\nexport var editStream = function editStream(id, formValues) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return streams.put(\"/streams/\".concat(id), formValues);\n\n              case 2:\n                response = _context4.sent;\n                dispatch({\n                  type: EDIT_STREAM,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x5) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n}; //Creating new async DELETE req\n\nexport var deleteStream = function deleteStream(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return streams.delete(\"/streams/\".concat(id));\n\n              case 2:\n                dispatch({\n                  type: DELETE_STREAM,\n                  payload: id\n                });\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x6) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/Users/billyendres/Documents/react/streams/client/src/actions/index.js"],"names":["streams","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","auth","post","response","data","fetchStreams","get","fetchStream","id","editStream","put","deleteStream","delete"],"mappings":"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","sourcesContent":["import streams from \"../apis/streams\";\nimport {\n\tSIGN_IN,\n\tSIGN_OUT,\n\tCREATE_STREAM,\n\tFETCH_STREAMS,\n\tFETCH_STREAM,\n\tDELETE_STREAM,\n\tEDIT_STREAM\n} from \"./types\";\n\n//Takes userId as argument and payload\n//referenced from onAuthChange function in GoogleOath\nexport const signIn = userId => {\n\treturn {\n\t\ttype: SIGN_IN,\n\t\tpayload: userId\n\t};\n};\n\nexport const signOut = () => {\n\treturn {\n\t\ttype: SIGN_OUT\n\t};\n};\n\n//Creating new async POST req\nexport const createStream = formValues => async (dispatch, getState) => {\n\tconst { userId } = getState().auth;\n\tconst response = await streams.post(\"/streams\", { ...formValues, userId });\n\tdispatch({ type: CREATE_STREAM, payload: response.data });\n\n\t//Using programmatic navigation to get user back to root route\n};\n\n//Creating new async GET req\nexport const fetchStreams = () => async dispatch => {\n\tconst response = await streams.get(\"/streams\");\n\tdispatch({ type: FETCH_STREAMS, payload: response.data });\n};\n\n//Creating new async GET req\nexport const fetchStream = id => async dispatch => {\n\tconst response = await streams.get(`/streams/${id}`);\n\tdispatch({ type: FETCH_STREAM, payload: response.data });\n};\n\n//Creating new async PUT req\nexport const editStream = (id, formValues) => async dispatch => {\n\tconst response = await streams.put(`/streams/${id}`, formValues);\n\tdispatch({ type: EDIT_STREAM, payload: response.data });\n};\n\n//Creating new async DELETE req\nexport const deleteStream = id => async dispatch => {\n\tawait streams.delete(`/streams/${id}`);\n\tdispatch({ type: DELETE_STREAM, payload: id });\n};\n"]},"metadata":{},"sourceType":"module"}